@MISC{BarFT-SMTLIB,
  author =	 {Clark Barrett and Pascal Fontaine and Cesare Tinelli},
  title =	 {{The Satisfiability Modulo Theories Library (SMT-LIB)}},
  howpublished = {{\tt www.SMT-LIB.org}},
  year =	 2016,
}

@techreport{lal2012corral,
author = {Lal, Akash and Qadeer, Shaz and Lahiri, Shuvendu},
title = {Corral: A Solver for Reachability Modulo Theories},
year = {2012},
month = {January},
abstract = {Consider a sequential programming language with control flow constructs such as assignments, choice, loops, and procedure calls. We restrict the syntax of expressions in this language to one that can be efficiently decided by a satisfiability-modulo-theories solver. For such a language, we define the problem of deciding whether a program can reach a particular control location as the reachability-modulo-theories problem. This paper describes the architecture of Corral, a semi-algorithm for the reachability-modulo-theories problem. It further describes the novel algorithms that comprise the various components of Corral. Finally, the paper presents evaluation of Corral against other related tools. Corral consistently outperforms its competitors on most benchmarks.},
url = {https://www.microsoft.com/en-us/research/publication/corral-a-solver-for-reachability-modulo-theories/},
number = {MSR-TR-2012-9},
}



@inproceedings{kissat-mab,
  TITLE = {{Un bandit manchot pour combiner CHB et VSIDS}},
  AUTHOR = {Sami Cherif, Mohamed and Habet, Djamal and Terrioux, Cyril},
  URL = {https://hal-amu.archives-ouvertes.fr/hal-03270931},
  BOOKTITLE = {{Actes des 16{\`e}mes Journ{\'e}es Francophones de Programmation par Contraintes (JFPC)}},
  ADDRESS = {Nice, France},
  YEAR = {2021},
  MONTH = Jun,
  PDF = {https://hal-amu.archives-ouvertes.fr/hal-03270931/file/jfpc2021d.pdf},
  HAL_ID = {hal-03270931},
  HAL_VERSION = {v1},
}


@unpublished{wang2019formal,
author = {Wang, Yuepeng and Lahiri, Shuvendu and Chen, Shuo and Pan, Rong and Dillig, Isil and Born, Cody and Naseer, Immad},
title = {Formal Specification and Verification of Smart Contracts for Azure Blockchain},
year = {2019},
month = {April},
abstract = {Ensuring correctness of smart contracts is paramount to ensuring trust in blockchain-based systems. This paper studies the safety and security of smart contracts in the Azure Blockchain Workbench, an enterprise Blockchain-as-a-Service offering from Microsoft. As part of this study, we formalize semantic conformance of smart contracts against a state machine model with access-control policy and develop a highly-automated formal verifier for Solidity that can produce proofs as well as counterexamples. We have applied our verifier VeriSol to analyze all contracts shipped with the Azure Blockchain Workbench, which includes application samples as well as a governance contract for Proof of Authority (PoA). We have found previously unknown bugs in these published smart contracts. After fixing these bugs, VeriSol was able to successfully perform full verification for all of these contracts.},
url = {https://www.microsoft.com/en-us/research/publication/formal-specification-and-verification-of-smart-contracts-for-azure-blockchain/},
}

@inproceedings{MoskewiczMZZM01,
  added-at = {2018-11-14T00:00:00.000+0100},
  author = {Moskewicz, Matthew W. and Madigan, Conor F. and Zhao, Ying and Zhang, Lintao and Malik, Sharad},
  biburl = {https://www.bibsonomy.org/bibtex/2db9023680efb151d536579b6b310d31d/dblp},
  booktitle = {DAC},
  ee = {https://www.wikidata.org/entity/Q56039659},
  interhash = {8862b5b5695df0dcfb26818840c3702f},
  intrahash = {db9023680efb151d536579b6b310d31d},
  isbn = {1-58113-297-2},
  keywords = {dblp},
  pages = {530-535},
  publisher = {ACM},
  timestamp = {2018-11-15T16:59:09.000+0100},
  title = {Chaff: Engineering an Efficient SAT Solver.},
  url = {http://dblp.uni-trier.de/db/conf/dac/dac2001.html#MoskewiczMZZM01},
  year = 2001
}




@inproceedings{grasp,
author = {Silva, Jo\~{a}o P. Marques and Sakallah, Karem A.},
title = {GRASP—a New Search Algorithm for Satisfiability},
year = {1997},
isbn = {0818675977},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {This paper introduces GRASP (Generic seaRch Algorithm for the Satisfiability Problem), an integrated algorithmic framework for SAT that unifies several previously proposed search-pruning techniques and facilitates identification of additional ones. GRASP is premised on the inevitability of conflicts during search and its most distinguishing feature is the augmentation of basic backtracking search with a powerful conflict analysis procedure. Analyzing conflicts to determine their causes enables GRASP to backtrack non-chronologically to earlier levels in the search tree, potentially pruning large portions of the search space. In addition, by "recording" the causes of conflicts, GRASP can recognize and preempt the occurrence of similar conflicts later on in the search. Finally, straightforward bookkeeping of the causality chains leading up to conflicts allows GRASP to identify assignments that are necessary for a solution to be found. Experimental results obtained from a large number of benchmarks, including many from the field of test pattern generation, indicate that application of the proposed conflict analysis techniques to SAT algorithms can be extremely effective for a large number of representative classes of SAT instances.},
booktitle = {Proceedings of the 1996 IEEE/ACM International Conference on Computer-Aided Design},
pages = {220–227},
numpages = {8},
keywords = {Electronic Design Automation., Backtracking, Non-chronological Backtracking, Search Algorithms, Propositional Satisfiability, Automatic Test Pattern Generation},
location = {San Jose, California, USA},
series = {ICCAD '96}
}


@article{modelchecking,
author = {Clarke, Edmund and Emerson, E. and Sifakis, Joseph},
year = {2009},
month = {11},
pages = {},
title = {Model checking},
volume = {52},
journal = {Communications of the ACM},
doi = {10.1145/1592761.1592781}
}


@MISC{bmcbiere,
    author = {Armin Biere and Alessandro Cimatti and Edmund M. Clarke and Ofer Strichman and Yunshan Zhu},
    title = {Bounded Model Checking},
    year = {2003},
    month = {12},
    pages = {117 - 148},
    volume = {58},
    journal = {Advances in Computers},
    doi = {10.1016/S0065-2458(03)58003-2}
}

@article{bmcsat,
author = {Clarke, Edmund and Biere, Armin and Raimi, Richard and Zhu, Yunshan},
title = {Bounded Model Checking Using Satisfiability Solving},
year = {2001},
issue_date = {July 2001},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {19},
number = {1},
issn = {0925-9856},
url = {https://doi.org/10.1023/A:1011276507260},
doi = {10.1023/A:1011276507260},
abstract = {The phrase model checking refers to algorithms for exploring the state space of a transition system to determine if it obeys a specification of its intended behavior. These algorithms can perform exhaustive verification in a highly automatic manner, and, thus, have attracted much interest in industry. Model checking programs are now being commercially marketed. However, model checking has been held back by the state explosion problem, which is the problem that the number of states in a system grows exponentially in the number of system components. Much research has been devoted to ameliorating this problem.In this tutorial, we first give a brief overview of the history of model checking to date, and then focus on recent techniques that combine model checking with satisfiability solving. These techniques, known as bounded model checking, do a very fast exploration of the state space, and for some types of problems seem to offer large performance improvements over previous approaches. We review experiments with bounded model checking on both public domain and industrial designs, and propose a methodology for applying the technique in industry for invariance checking. We then summarize the pros and cons of this new technology and discuss future research efforts to extend its capabilities.},
journal = {Form. Methods Syst. Des.},
month = jul,
pages = {7–34},
numpages = {28},
keywords = {processor verification, satisfiability, model checking, cone of influence reduction, bounded model checking}
}


@InProceedings{symbolicMC2,
author="Biere, Armin
and Cimatti, Alessandro
and Clarke, Edmund
and Zhu, Yunshan",
editor="Cleaveland, W. Rance",
title="Symbolic Model Checking without BDDs",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="193--207",
abstract="Symbolic Model Checking [3], [14] has proven to be a powerful technique for the verification of reactive systems. BDDs [2] have traditionally been used as a symbolic representation of the system. In this paper we show how boolean decision procedures, like St{\aa}lmarck's Method [16] or the Davis {\&} Putnam Procedure [7], can replace BDDs. This new technique avoids the space blow up of BDDs, generates counterexamples much faster, and sometimes speeds up the verification. In addition, it produces counterexamples of minimal length. We introduce a bounded model checking procedure for LTL which reduces model checking to propositional satisfiability.We show that bounded LTL model checking can be done without a tableau construction. We have implemented a model checker BMC, based on bounded model checking, and preliminary results are presented.",
isbn="978-3-540-49059-3"
}
@InProceedings{symbolicMC,
author="Clarke, E.
and McMillan, K.
and Campos, S.
and Hartonas-Garmhausen, V.",
editor="Alur, Rajeev
and Henzinger, Thomas A.",
title="Symbolic model checking",
booktitle="Computer Aided Verification",
year="1996",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="419--422",
abstract="Symbolic model checking is a powerful formal specification and verification method that has been applied successfully in several industrial designs. Using symbolic model checking techniques it is possible to verify industrial-size finite state systems. State spaces with up to 1030 states can be exhaustively searched in minutes. Models with more than 10120 states have been verified using special techniques.",
isbn="978-3-540-68599-9"
}

@InProceedings{explicitMC,
author="Holzmann, Gerard J.",
editor="Clarke, Edmund M.
and Henzinger, Thomas A.
and Veith, Helmut
and Bloem, Roderick",
title="Explicit-State Model Checking",
bookTitle="Handbook of Model Checking",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="153--171",
abstract="In this chapter we discuss the methodology used in explicit-state logic model checking, specifically as applied to asynchronous software systems. As the name indicates, in an explicit-state model checker the state descriptor for a system is maintained in explicit, and not symbolic, form, as are all state transitions. Abstraction techniques and partial-order reduction algorithms are used to reduce the search space to a minimum, and advanced storage techniques can be used to extend the reach of this form of verification to very large system sizes. The basic algorithms for explicit-state model checking date from the late 1970s and early 1980s. More advanced versions of these algorithms remain an active area of research.",
isbn="978-3-319-10575-8",
doi="10.1007/978-3-319-10575-8_5",
url="https://doi.org/10.1007/978-3-319-10575-8_5"
}